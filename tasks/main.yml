---
- name: Check variables
  ansible.builtin.assert:
    that: item.assert
    fail_msg: "{{ item.fail_msg}}"
  with_items:
    - assert: "nautobot__name is defined and nautobot__name != ''"
      fail_msg: "nautobot__name must be set to a identical name, this is prefix for all docker images"
    - assert: "nautobot__image is defined and nautobot__image != ''"
      fail_msg: "nautobot__image must be set to a nautobot image"
    - assert: "nautobot__image_python_version is defined and nautobot__image_python_version is version('3.9', '>')"
      fail_msg: "nautobot__image_python_version must be higher than 3.9"
    - assert: "nautobot__superuser_api_token is defined and nautobot__superuser_api_token | length <41"
      fail_msg: "nautobot__superuser_api_token must be hset and maximum of 40 characters"




- name: Include OS-specific vars
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install packages for OS
  ansible.builtin.package:
    name={{ item.name }}
    version={{ item.version | default(omit) }}
  with_items: "{{ os_packages }}"
  become: true
  when: os_packages is defined

- name: Install  pip packages
  ansible.builtin.pip:
    name: "{{ item }}"
    state: forcereinstall
    executable: pip3
    extra_args: "--user --upgrade {{ nautobot__pip_install_extra_args }}"
    umask: "0022"
  changed_when: false
  with_items: "{{ python_packages }}"
  when: python_packages is defined

- name: Remove existing {{ nautobot__name }} containers
  block:
    - name: Remove default
      docker_container:
        name: "{{ nautobot__name }}"
        state: absent
    - name: Remove Celery Worker
      docker_container:
        name: "{{ nautobot__name }}-celery-worker-1"
        state: absent
    - name: Remove Celery Beat
      docker_container:
        name: "{{ nautobot__name }}-celery-beat"
        state: absent
    - name: Remove Redis
      docker_container:
        name: "{{ nautobot__name }}-redis"
        state: absent
    - name: Remove db
      docker_container:
        name: "{{ nautobot__name }}-db"
        state: absent
      when: nautobot__install_own_postgres_db
  when: nautobot__remove_existing_container

- name: Create a network for nautobot
  community.docker.docker_network:
    name: "{{ nautobot__network_name }}"
  when: nautobot__network_cidr is undefined or (nautobot__network_cidr is defined and nautobot__network_cidr|length<6)

- name: Create a network for nautobot with ip cidr
  community.docker.docker_network:
    name: "{{ nautobot__network_name }}"
    ipam_config:
      - subnet: "{{ nautobot__network_cidr }}"
        gateway: "{{ nautobot__network_cidr | ansible.utils.ipaddr('next_usable') }}"
        iprange: "{{ nautobot__network_cidr }}"
  when: nautobot__network_cidr is defined and nautobot__network_cidr|length>5

- name: Create database volume for Postgres
  community.docker.docker_volume:
    name: "{{ nautobot__db_volume_name }}"
  when: nautobot__install_own_postgres_db and (nautobot__db_volume_name is defined and nautobot__db_volume_name != '')

# - name: Create config volume for Nautobot
#   community.docker.docker_volume:
#     name: "{{ nautobot__config_volume_name }}"

- name: Remove home directory
  file:
    state: absent
    path: "{{ nautobot__home }}"
  when: nautobot__remove_existing_home_dir

- name: Ensure group "postgres" exists with correct gid
  ansible.builtin.group:
    name: postgres
    state: present
    gid: 999
    non_unique: true       # when provisioning with molecule test or vagrant is is possible that id already in use

- name: Add user "postgres"
  ansible.builtin.user:
    name: postgres
    groups: docker
    shell: /sbin/nologin
    uid: 999
    create_home: no
    non_unique: true       # Needed for molecule testing as 999 is already in use
    append: yes
    comment: "Postgres data user"
    state: present
  become: true

- name: Ensure group "nautobot" exists with correct gid
  ansible.builtin.group:
    name: nautobot
    state: present
    gid: "{{ nautobot__container_gid }}"
    non_unique: true # when provisioning with molecule test or vagrant is is possible that id already in use
# User cannot be created as Nautobot use 999 same as postgress and cannot be changed with ENV Vars

- name: Create Nautobot home dir
  file:
    state: directory
    path: "{{ nautobot__home }}"
    mode: "0760"
    owner: "{{ nautobot__container_uid | default('root') }}"
    group: "{{ nautobot__container_gid | default('root') }}"

- name: Create directories from variable list
  ansible.builtin.file:
    state: directory
    path: "{{ item.path }}"
    mode: "{{ item.mode | default('0755') }}"
    owner: "{{ item.owner | default(docker_uid) | default('root') }}"
    group: "{{ item.group | default(docker_gid) | default('root') }}"
  with_items: "{{ nautobot__directories }}"

- name: Create database directories
  ansible.builtin.file:
    state: directory
    path: "{{ nautobot__postgres_data_dir }}"
    mode: "0770"
    owner: "{{ nautobot__container_uid | default('postgres') }}"
    group: "{{ nautobot__container_gid | default('postgres') }}"
  changed_when: false   # Molecule test only does not idempodence this folder

# Create PostgreSQL  DB
- name: Run DB container
  docker_container:
    name: "{{ nautobot__postgres_name }}"
    image: "{{ nautobot__postgres_image }}"
    restart_policy: always
    networks:
      - name: "{{ nautobot__network_name }}"
    env: "{{ nautobot__postgres_env | combine(nautobot__postgres_user_env) }}"
    volumes: "{{ nautobot__postgres_directory_volumes }}"
    log_driver: "{{ nautobot__log_driver }}"
    log_options: "{{ nautobot__log_options }}"
  when: nautobot__install_own_postgres_db

- name: Run nautobot Redis
  community.docker.docker_container:
    name: "{{ nautobot__name }}-redis"
    image: "redis:alpine"
    pull: "{{ nautobot__pull_image }}"
    restart_policy: always
    network_mode: "{{ nautobot__network_mode }}"
    networks:
      - name: "{{ nautobot__network_name }}"
    env: "{{ nautobot__redis_env }}"
    log_driver: "{{ nautobot__log_driver }}"
    log_options: "{{ nautobot__log_options }}"
    command: "redis-server --appendonly yes --requirepass {{ nautobot__redis_password }}"

- name: Install Redis client tools
  ansible.builtin.package:
    name: redis-tools
    state: present
  when: nautobot__install_redis_client_tools

- name: Construct plugin config
  block:
    - name: Create Plugins list
      set_fact:
        nautobot__plugins_list: "{{ nautobot__plugins | community.general.json_query('[*].plugin_name') | replace('-','_') }}"

    - name: Construct plugin config
      set_fact:
        nautobot__plugin_config: "{{ (nautobot__plugin_config | default({}))  |combine(item.plugin_config|default({})) }}"
      with_items: "{{ nautobot__plugins }}"
  when: nautobot__plugins is defined and nautobot__plugins|length>0

- name: Copy nautobot_config.py so it is present by new installations
  template:
    src: nautobot_config.py.j2
    # dest: "{{ nautobot__config_volume_path }}/nautobot_config.py"
    dest: "{{ nautobot__home }}/config/nautobot_config.py"
    owner: "{{ nautobot__container_uid | default(docker_gid) |default(1001) }}"
    group: "{{ nautobot__container_gid | default(docker_gid) |default(1001) }}"
    mode: "0760"
  notify: restart nautobot-stack

- name: Copy uwsgi.ini
  template:
    src: uwsgi.ini.j2
    dest: "{{ nautobot__home }}/config/uwsgi.ini"
    owner: "{{ nautobot__container_uid | default(docker_gid) |default(1001) }}"
    group: "{{ nautobot__container_gid | default(docker_gid) |default(1001) }}"
    mode: "0760"
  notify: restart nautobot-stack

- name: Copy custom_jinja_filters
  ansible.builtin.copy:
    src: "{{ role_path }}/files/custom_jinja_filters/"
    dest: "{{ nautobot__home }}/config/custom_jinja_filters/"
    owner: "{{ nautobot__container_uid | default(docker_gid) |default(1001) }}"
    group: "{{ nautobot__container_gid | default(docker_gid) |default(1001) }}"
    mode: "0760"

- name: Plugins found - build custom image (only when networktocode image is used)
  block:
    - name: "Check if image {{ nautobot__name }}-custom:{{ (nautobot__image | split(':'))[1] | default('latest') }} exists"
      community.docker.docker_image_info:
        name:
          - "{{ nautobot__name }}-custom:{{ (nautobot__image | split(':'))[1] | default('latest') }}"
      register: result_local_image

    - name: Copy Dockerfile with plugins
      template:
        src: "{% if (nautobot__image | split(':'))[1] is version('2.0.0', '<=') %}Dockerfile_v1.j2{% else %}Dockerfile.j2{% endif %}"
        dest: "{{ nautobot__home }}/Dockerfile"
        owner: "{{ nautobot__container_uid | default(docker_gid) |default(1001) }}"
        group: "{{ nautobot__container_gid | default(docker_gid) |default(1001) }}"
        mode: "0760"
      register: dockerfile

    - name: Build Nautobot with custom plugins
      community.docker.docker_image:
        name: "{{ nautobot__name }}-custom"
        tag: "{{ (nautobot__image | split(':'))[1] | default('latest') }}"
        build:
          path: "{{ nautobot__home }}"
          nocache: true
          pull: false # "{{ nautobot__pull_image | default(false) }}"
          args:
            http_proxy: "{{ http_proxy | default('') }}"
            https_proxy: "{{ https_proxy | default('') }}"
        source: build
        force_source: yes
      register: docker_build
      ignore_errors: true
      when: dockerfile.changed or result_local_image.images | length <1

    - name: Restart Docker if build failed
      ansible.builtin.service:
        name: docker
        state: restarted
      when: "docker_build.stdout is defined and not 'Successfully tagged' in docker_build.stdout"

    - name: Build Nautobot with custom plugins (second attempt)
      community.docker.docker_image:
        name: "{{ nautobot__name }}-custom"
        tag: "{{ (nautobot__image | split(':'))[1] | default('latest') }}"
        build:
          path: "{{ nautobot__home }}"
          nocache: true
          pull: false # "{{ nautobot__pull_image | default(false) }}"
          args:
            http_proxy: "{{ http_proxy | default('') }}"
            https_proxy: "{{ https_proxy | default('') }}"
        source: build
        force_source: yes
      when: "docker_build.stdout is defined and not 'Successfully tagged' in docker_build.stdout"

    - name: Override image name with local Docker
      set_fact:
        nautobot__image: "{{ nautobot__name }}-custom:{{ (nautobot__image | split(':'))[1] | default('latest') }}"
  when: nautobot__plugins is defined and nautobot__plugins|length>0 and (nautobot__custom_image is undefined or nautobot__custom_image != '')

- name: Set Docker Hub image for networktocode base image
  set_fact:
    nautobot__image: "networktocode/{{ nautobot__image }}-py{{ nautobot__image_python_version | default('3.9') }}"
  when: nautobot__plugins is undefined or nautobot__plugins|length<1 and (nautobot__custom_image is undefined or nautobot__custom_image != '')

- name: Set Docker Hub image for custom image
  set_fact:
    nautobot__image: "{{ nautobot__custom_image }}"
  when: nautobot__plugins is undefined or nautobot__plugins|length<1 and nautobot__custom_image is defined and nautobot__custom_image != ''

- name: Run nautobot container frontend
  community.docker.docker_container:
    name: "{{ nautobot__name }}"
    image: "{{ nautobot__image }}"
    restart_policy: always
    network_mode: "{{ nautobot__network_mode }}"
    networks: "{{ nautobot__networks }}"
    ports: "{{ nautobot__ports }}"
    user: "{{ nautobot__container_uid | default('nautobot') }}:{{ nautobot__container_gid | default('nautobot') }}"
    env: "{{ nautobot__default_env | combine(nautobot__env) }}"
    volumes: "{{ nautobot__directory_volumes + nautobot__file_volumes }}"
    log_driver: "{{ nautobot__log_driver }}"
    log_options: "{{ nautobot__log_options }}"
    healthcheck:
      interval: "5s"
      timeout: "5s"
      start_period: "5s"
      retries: 3
      test: ["CMD", "nautobot-server", "health_check"]

- name: Pause for starting worker (exampel when migrations are needed)
  pause:
    seconds: "{{ nautobot__pause_before_start_worker }}"
  when: nautobot__pause_before_start_worker is defined

- name: Run nautobot worker
  community.docker.docker_container:
    name: "{{ nautobot__name }}-worker-{{ item }}"
    image: "{{ nautobot__image }}"
    restart_policy: always
    networks:
      - name: "{{ nautobot__network_name }}"
    command: "nautobot-server rqworker"
    command_handling: "compatibility"
    user: "{{ nautobot__container_uid | default('nautobot') }}:{{ nautobot__container_gid | default('nautobot') }}"
    env: "{{ nautobot__default_env | combine(nautobot__env) }}"
    volumes: "{{ nautobot__directory_volumes + nautobot__file_volumes }}"
    log_driver: "{{ nautobot__log_driver }}"
    log_options: "{{ nautobot__log_options }}"
    healthcheck:
      interval: "5s"
      timeout: "5s"
      start_period: "5s"
      retries: 3
      test: ["CMD", "nautobot-server", "health_check"]
  with_sequence: "start=1 end={{ nautobot__number_of_workers | default(1) }}"
  when: nautobot__install_worker| bool

- name: Run celery worker
  community.docker.docker_container:
    name: "{{ nautobot__name }}-celery-worker-{{ item }}"
    hostname: "worker{{ item }}"
    image: "{{ nautobot__image }}"
    restart_policy: always
    networks:
      - name: "{{ nautobot__network_name }}"
    # user: "{{ nautobot__container_uid | default('nautobot') }}:{{ nautobot__container_gid | default('nautobot') }}"
    env: "{{ nautobot__default_env | combine(nautobot__env) }}"
    log_driver: "{{ nautobot__log_driver }}"
    log_options: "{{ nautobot__log_options }}"
    volumes: "{{ nautobot__directory_volumes + nautobot__file_volumes }}"
    command: "nautobot-server celery worker -n node{{ item }}@%h -l {{ nautobot__log_level }}"
    # command_handling: "compatibility"
    # tty: true
    healthcheck:
      interval: "30s"
      timeout: "10s"
      start_period: "30s"
      retries: 3
      test: ["CMD", "bash", "-c", "nautobot-server celery worker -l {{ nautobot__log_level }} --events"]    
  with_sequence: "start=1 end={{ nautobot__number_of_workers | default(1) }}"

- name: Run celery beat
  community.docker.docker_container:
    name: "{{ nautobot__name }}-celery-beat"
    image: "{{ nautobot__image }}"
    restart_policy: always
    networks:
      - name: "{{ nautobot__network_name }}"
    # user: "{{ nautobot__container_uid | default('nautobot') }}:{{ nautobot__container_gid | default('nautobot') }}"
    env: "{{ nautobot__default_env | combine(nautobot__env) }}"
    log_driver: "{{ nautobot__log_driver }}"
    log_options: "{{ nautobot__log_options }}"
    volumes: "{{ nautobot__directory_volumes + nautobot__celerybeat_directory_volumes + nautobot__file_volumes }}"
    command: "nautobot-server celery beat -l {{ nautobot__log_level }}"
    #  command_handling: "compatibility"
    # tty: true

- name: Construct plugin config
  block:
    - name: Create Plugins list
      set_fact:
        nautobot__plugins_list: "{{ nautobot__plugins | community.general.json_query('[*].plugin_name') | replace('-','_') }}"
    - name: Construct plugin config
      set_fact:
        nautobot__plugin_config: "{{ (nautobot__plugin_config | default({}))  |combine(item.plugin_config|default({})) }}"
      with_items: "{{ nautobot__plugins }}"
  when: nautobot__plugins is defined and nautobot__plugins|length>0

# - name: Copy uWSGI
#   template:
#     src: "uwsgi.ini.j2"
#     dest: ""{{ nautobot__config_volume_path }}/conf/uwsgi.ini"
    # owner: "{{ nautobot__container_uid }}"
    # group: "{{ nautobot__container_gid }}"
#     mode: 0600
#   notify: restart nautobot
